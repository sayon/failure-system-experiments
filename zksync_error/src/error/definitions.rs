//!
//! Should be autogenerated from JSON
//!
use crate::error::CustomErrorMessage;

use strum_macros::EnumDiscriminants;

#[repr(i32)]
#[derive(Clone, Debug, Eq, EnumDiscriminants, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(RustSDKCode))]
#[strum_discriminants(vis(pub))]
#[non_exhaustive]
pub enum RustSDK {
    WrongTool { info: String } = 1,
}

#[non_exhaustive]
// non_exhaustive should be removed when the API stabilizes and the migration to the new system is complete.
#[repr(i32)]
#[derive(Clone, Debug, Eq, EnumDiscriminants, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(ZksolcCode))]
#[strum_discriminants(vis(pub))]
pub enum Zksolc {
    Generic {
        filename: String,
        line: i32,
        column: i32,
    } = 42,
}

#[repr(i32)]
#[derive(Clone, Debug, Eq, EnumDiscriminants, PartialEq, serde::Serialize, serde::Deserialize)]
#[strum_discriminants(name(SolcCode))]
#[strum_discriminants(vis(pub))]
#[non_exhaustive]
pub enum Solc {
    SomeError(String) = 1,
    OtherSolcError { filename: String, other: String } = 2,
}

impl CustomErrorMessage for Solc {
    fn get_message(&self) -> String {
        match self {
            Solc::SomeError(e) => format!("This is a solc error {e}"),
            Solc::OtherSolcError { .. } => String::from("Whatever"),
        }
    }
}

impl CustomErrorMessage for Zksolc {
    fn get_message(&self) -> String {
        match self {
            Zksolc::Generic {
                filename,
                line,
                column,
            } => format!(
                "Some error in zksolc when processing  {} line {} col {}",
                filename, line, column
            ),
        }
    }
}

impl CustomErrorMessage for RustSDK {
    fn get_message(&self) -> String {
        match self {
            RustSDK::WrongTool { info } => format!("Wrong tool or smth: {}", info),
        }
    }
}
